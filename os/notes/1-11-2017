@title - Goals and Purpose of Designing OS
@Chapter - 1
@list - Goals
	1. Convenience for the User
	2. Control Program
@list - Purpose
	1. effecient use of resources
	2. resource allocation
* Everything is a system call
@def System Model - (figure 1.2 in text)
@image - 1.2
@def DMA - Direct Memory Access - don't need to go through cpu to get to memory
@def interrupt - control transfer, you were doing one thing now you are doing something different. egmain -> function -> main
* system interrupt handler is used to switch between thingies,
* interrupts are typically asynchronus
@list - Types of Interrupts
	1. hardware - keyboard
	2. software - overflow
	3. Trap/exception - not serious errors but they are required to be dealt with

@list - servicing interrupts
	1. Recognition - realize where the interrupt came from
	2. Control Transfer - we now know where the interrupt came from so we can handle control over to the interrupting program
	3. Return - move back to the program we were originally running
@def OS - Interrupt driven control program

# Memory Heirarchy
@def Memory Heirarchy - Memory ordered by lowest cost to highest cost with their storage quantities being inversed
@image - 1.4

# Protection
@list What we are protecting
	1. Time - CPU time, limit amount of time a user gets on a CPU
	2. Space - protect user's memoryy from each other, establish fence registers(boundaries between chunks of memory)
	3. Priviledged Instructions - Resources

# System Call
@ image - 1.10
@def Kernel - Ram Resident portion of OS
* open System Call
@ image - 2.6
* Write System Call
@ image - tbd whichever figure is the write system call
